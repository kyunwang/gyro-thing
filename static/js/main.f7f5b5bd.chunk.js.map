{"version":3,"sources":["screens/Viewer.js","screens/Controller.js","helpers/socket.js","App.js","helpers/detectMobile.js","serviceWorker.js","index.js"],"names":["styles","p","position","left","right","zIndex","fontWeight","textAlign","letterSpacing","lineHeight","pTitle","top","pIntro","padding","aIntro","color","span","display","fontSize","paddingTop","Box","rotation","visible","userData","test","attach","args","transparent","Plane","receiveShadow","Viewer","connectionID","orientation","alpha","beta","gamma","style","href","window","location","camera","intensity","angle","penumbra","castShadow","input","border","borderBottom","backgroundColor","width","maxWidth","button","marginTop","pre","Controller","onSubmit","useState","viewCode","setViewCode","handleOnSubmit","e","preventDefault","type","placeholder","value","onChange","target","onClick","defaultProps","readySocketData","data","readyData","JSON","stringify","App","state","isMobile","navigator","userAgent","wsClient","handleSockets","parsedData","parse","parseJSON","setState","handleDeviceOrientation","readyState","WebSocket","OPEN","client","send","handleSubmitCode","this","url","callback","config","onopen","console","log","onerror","error","onmessage","initSockets","DeviceOrientationEvent","addEventListener","removeEventListener","className","Component","Boolean","hostname","match","ReactDOM","render","document","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f7f5b5bd.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Canvas } from 'react-three-fiber'\n\n// Quick styling\nconst styles = {\n\tp: {\n\t\tposition: 'absolute',\n\t\tleft: 0,\n\t\tright: 0,\n\t\tzIndex: 1,\n\t\tfontWeight: 300,\n\t\ttextAlign: 'center',\n\t\tletterSpacing: '.2rem',\n\t\tlineHeight: 1.3\n\t},\n\tpTitle: {\n\t\ttop: '1rem',\n\t},\n\tpIntro: {\n\t\ttop: '60%',\n\t\tpadding: '0 30%'\n\t},\n\taIntro: {\n\t\tcolor: '#5086EC'\n\t},\n\tspan: {\n\t\tdisplay: 'inline-block',\n\t\tfontWeight: 500,\n\t\tfontSize: '3.6rem',\n\t\tpaddingTop: '.4rem'\n\t}\n}\n\nfunction Box({ rotation }) {\n  return (\n    <mesh\n\t\t\tvisible\n\t\t\tuserData={{ test: \"hello\" }} \n\t\t\tposition={[0, 0, 0]}\n\t\t\trotation={rotation}\n\t\t>\n\t\t\t<boxGeometry attach=\"geometry\" args={[2, 2, 2]} />\n\t\t\t<meshStandardMaterial attach=\"material\" color=\"indianred\" transparent />\n\t\t</mesh>\n  )\n};\n\nfunction Plane({position}) {\n\treturn (\n\t\t<mesh position={position} receiveShadow>\n\t\t\t<planeBufferGeometry attach=\"geometry\" args={[1000, 1000]} />\n\t\t\t<meshPhongMaterial attach=\"material\" color=\"#272727\" />\n\t\t</mesh>)\n}\n\nconst Viewer = ({connectionID, orientation: {alpha, beta, gamma}}) => {\n\tconst rotation = [beta, gamma, alpha];\n\n\treturn (\n\t\t<>\n\t\t\t<p style={{...styles.p, ...styles.pTitle}}>\n\t\t\t\tyour code<br/>\n\t\t\t\t<span style={styles.span}>{connectionID}</span>\n\t\t\t</p>\n\t\t\t<p style={{...styles.p, ...styles.pIntro}}>Go here on yout phone:  <a style={styles.aIntro} href={window.location.href}>{window.location.href}</a></p>\n\t\t\t\n\t\t\t<Canvas camera={{ position: [0, 0, 15] }}>\n\t\t\t\t<ambientLight intensity={0.8} />\n\t\t\t\t<spotLight intensity={0.9} position={[30, 30, 50]} angle={0.4} penumbra={1} castShadow />\n\t\t\t\t<Plane position={[0, 0, -20]}/>\n\t\t\t\t<Box rotation={rotation} />\n\t\t\t</Canvas>\n\t\t</>\n\t);\n}\n\nexport default Viewer;","\n// controller should be able to set an id / viewer id\n\nimport React, {useState} from 'react';\nimport PropTypes from 'prop-types';\n\n// Yup another repeat\nconst styles = {\n\tp: {\n\t\tfontWeight: 300,\n\t\tfontSize: '1.2rem',\n\t\tletterSpacing: '.2rem',\n\t\tlineHeight: 1.3\n\t},\n\tinput: {\n\t\tborder: 'none',\n\t\tborderBottom: '2px solid rgba(255, 255, 255, .6)',\n\t\tfontSize: '3.2rem',\n\t\tcolor: '#fff',\n\t\tbackgroundColor: 'transparent',\n\t\twidth: '100%',\n\t\tmaxWidth: '24rem'\n\t},\n\tbutton: {\n\t\tdisplay: 'block',\n\t\tletterSpacing: '.2rem',\n\t\tcolor: '#fff',\n\t\tbackgroundColor: 'transparent',\n\t\twidth: '100%',\n\t\tmaxWidth: '24rem',\n\t\tmarginTop: '1.2rem',\n\t\tpadding: '.8rem',\n\t\tborder: '2px solid #fff',\n\t},\n\tpre: {\n\t\tfontSize: '3.6rem',\n\t\ttextAlign: 'center'\n\t}\n}\n\nconst Controller = ({connectionID, onSubmit}) => {\n\tconst [viewCode, setViewCode] = useState(null);\n\n\tconst handleSetCode = e => {\n\t\tconst value = e.target.value;\n\t\tif (value <= 99999)\tsetViewCode(value)\n\t\t\n\t}\n\n\tconst handleOnSubmit = (e) => {\t\n\t\tonSubmit(viewCode);\n\t\te.preventDefault();\n\t}\n\n\tif (connectionID) {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<p style={styles.p}>Yay, you are connected to <pre style={styles.pre}>{connectionID}</pre></p>\n\t\t\t\t<p style={styles.p}>Have fun rotating a box ü§∑üèª‚Äç‚ôÇÔ∏è</p>\n\t\t\t</div>\n\t\t)\n\t}\n\n\treturn (\n\t\t<>\n\t\t\t<p style={styles.p} >Enter the code to control the cube</p>\n\t\t\t<form onSubmit={handleOnSubmit}>\n\t\t\t\t\t<input style={styles.input} type=\"number\" placeholder=\"e.g. 61511\" value={viewCode} onChange={handleSetCode} ></input>\n\t\t\t\t\t<button style={styles.button} onClick={handleOnSubmit}>CONNECT</button>\n\t\t\t</form>\n\t\t</>\n\t);\n}\n\nController.propTypes = {};\nController.defaultProps = {};\n\nexport default Controller;","\nexport function initSockets({url, config = {}, callback}) {\n\tconst wsClient = new WebSocket(url);\n\t\n\twsClient.onopen = () => {\n\t\tconst data = readySocketData('on-connect', 'connected')\n\t\twsClient.send(data);\n\t\tconsole.log('WebSocket Client Connected');\n\t};\n\t\n\twsClient.onerror = error => {\n\t\tconsole.log(`WebSocket error: ${error}`, error);\n\t};\n\t\n\twsClient.onmessage = data => callback(data);\n\t\n\treturn wsClient;\n}\n\n// Subscribing like this doesn't seem to work well with ws package - does better with socket.io\nexport function subscribeToMessage(socket, callback) {\n\tsocket.onmessage = data => callback(data);\n}\n\nexport function parseJSON(data) {\n\treturn JSON.parse(data);\n}\n\nexport function stringifyJSON(data) {\n\treturn JSON.stringify(data);\n}\n\nexport function readySocketData(type, data) {\n\tconst readyData = { type, data };\n\t\n\tconst stringifiedData = JSON.stringify(readyData);\n\treturn stringifiedData;\n}","import './App.css'\nimport React, { Component } from 'react';\n\nimport Viewer from './screens/Viewer';\nimport Controller from './screens/Controller';\n\nimport { initSockets, readySocketData, parseJSON } from './helpers/socket';\nimport { detectMobile } from './helpers/detectMobile.js';\n\n\nclass App extends Component {\n\tstate = {\n\t\tisMobile: detectMobile(),\n\t\t// whatVersion: null,\n\t\torientation: {alpha: null, beta: null, gamma: null,},\n\t\twsClient: null,\n\t\tconnectionID: null\n\t}\n\n\tcomponentDidMount() {\n\t\tconst { isMobile } = this.state;\n\t\tconst url = 'wss://gyro-thing-server-imwbhkzgzj.now.sh';\n\t\t\n\t\tconst wsClient = initSockets({url, callback: this.handleSockets});\n\t\t\n\t\t// Add support shizzle feedback - when using non supporting device\n\n\t\tif (window.DeviceOrientationEvent && isMobile) {\n\t\t\twindow.addEventListener('deviceorientation', this.handleDeviceOrientation, false);\n\t\t\t// this.setState({wsClient, whatVersion: 'Mobile'})\n\t\t} else {\n\t\t\t// this.setState({wsClient, whatVersion: 'Viewer'})\n\t\t}\n\n\t\tthis.setState({wsClient});\n\t}\n\n\tcomponentWillUnmount() {\n\t\twindow.removeEventListener('deviceorientation', this.handleDeviceOrientation)\n\t}\n\n\n\n\t//for desktop/larger screens / viewer\n\thandleSockets = (data) => {\n\t\t// console.log(parseJSON(data.data));\n\t\tconst parsedData = parseJSON(data.data);\n\t\tswitch(parsedData.type) {\n\t\t\tcase 'register-client':\n\t\t\tcase 'result-client-check':;\n\t\t\t\tthis.setState({connectionID: parsedData.data});\n\t\t\t\tbreak;\n\t\t\tcase 'receive-orientation': \n\t\t\t\tthis.setState({orientation: parsedData.data.orientation});\n\t\t\t\tbreak;\n\t\t\tdefault: \n\t\t\t\tbreak;\n\t\t}\n\t}\n\n\t// for mobile/controller\n\thandleDeviceOrientation = (orientation) => {\n\t\tconst { wsClient, connectionID } = this.state;\n\t\tconst { alpha, beta, gamma } = orientation;\n\n\t\tif (!connectionID) return; // TODO: show a feedback\n\n\t\t// console.log(alpha, beta, gamma);\n\t\tif (wsClient.readyState === WebSocket.OPEN) {\n\t\t\tconst orientation = {\n\t\t\t\tclient: connectionID,\n\t\t\t\torientation: {\n\t\t\t\t\talpha: (alpha + 180) / 20,\n\t\t\t\t\tbeta: beta / 20,\n\t\t\t\t\tgamma: -gamma / 20\n\t\t\t\t}\n\t\t\t};\n\t\t\t\n\t\t\tconst data = readySocketData('send-orientation', orientation);\n\n\t\t\twsClient.send(data);\n\t\t}\n\t}\n\n\n\thandleSubmitCode = (connectionID) => {\n\t\tconst { wsClient } = this.state;\n\t\tif (connectionID >= 10000 && connectionID <= 99999) {\n\t\t\t// this.setState({ connectionID });\n\n\t\t\tconst data = readySocketData('check-client', connectionID);\n\t\t\twsClient.send(data);\n\t\t}\n\t}\n\n\trender() {\n\t\tconst { connectionID, orientation, isMobile } = this.state;\n\n\t\treturn (\n\t\t\t<div className=\"main\">\n\t\t\t\t{\n\t\t\t\t\tisMobile\n\t\t\t\t\t\t? <Controller onSubmit={this.handleSubmitCode} connectionID={connectionID} />\n\t\t\t\t\t\t: <Viewer orientation={orientation} connectionID={connectionID} />\n\t\t\t\t}\n\t\t\t\t<footer>\n\t\t\t\t\tMade on a üõã by <a href=\"https://github.com/kyunwang\">kyunwang</a>. Repo <a href=\"https://github.com/kyunwang/gyro-thing\">here</a>\n\t\t\t</footer>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;\n","export function detectMobile() {\n\treturn /Mobi/i.test(navigator.userAgent) || /Android/i.test(navigator.userAgent)\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}